---
alwaysApply: true
description: Git 푸시 후 문서 자동 업데이트 가이드
---

# Git 푸시 후 문서 업데이트 자동화 규칙

## 🔄 필수 작업 순서

### 1. Git 푸시 완료 후 즉시 실행
Git 푸시가 성공적으로 완료되면 **반드시** 다음 문서들을 업데이트해야 합니다:

### 2. 업데이트 대상 문서
- **[README.md](mdc:README.md)**: 주요 기능 변경사항 반영
- **[DEPLOYMENT_GUIDE.md](mdc:DEPLOYMENT_GUIDE.md)**: 배포 관련 변경사항
- **[PRD_Implementation_Complete.md](mdc:PRD_Implementation_Complete.md)**: 구현 완료 상태 업데이트

### 3. 문서 업데이트 형식

#### README.md 업데이트 규칙
```markdown
## 📅 [날짜] 업데이트 내역

### ✨ 새로운 기능
- [기능 설명]

### 🎨 UI/UX 개선
- [개선 사항]

### 🔧 백엔드 개선
- [기술적 개선사항]

### 🐛 버그 수정
- [수정된 버그]

### 📊 데이터/성능 개선
- [데이터 관련 개선사항]
```

#### 업데이트 위치
- README.md의 **상단**에 최신 업데이트 추가
- 기존 내용은 아래로 밀어서 보존
- 날짜 형식: `YYYY-MM-DD` (예: 2024-08-19)

### 4. 자동 실행 조건
- `git push` 명령어 실행 후
- 푸시가 성공적으로 완료된 경우
- 사용자의 별도 요청 없이 **자동으로** 실행

### 5. 업데이트 내용 수집 방법
1. **커밋 메시지 분석**: 최근 커밋들의 메시지에서 변경사항 추출
2. **파일 변경 분석**: 수정된 파일들의 변경사항 요약
3. **기능별 분류**: 새 기능, UI 개선, 버그 수정 등으로 분류
4. **사용자 친화적 설명**: 기술적 용어를 사용자가 이해하기 쉽게 변환

### 6. 예시 상황별 대응

#### 포인트 시스템 개선 시
```markdown
## 📅 2024-08-19 업데이트 내역

### ✨ 새로운 기능
- 쎈수학 과목 추가로 4과목 포인트 시스템 완성
- 포인트 변경 히스토리 추적 기능 추가

### 🎨 UI/UX 개선
- 모든 평균값에서 소수점 제거 (500.0점 → 500점)
- 대시보드 주간 포인트 현황 4과목 균등 배치

### 🔧 백엔드 개선
- 포인트 계산 정확도 향상 (중복 제거 로직)
- 완전 정수 처리로 표시 일관성 확보

### 🐛 버그 수정
- 아동별 포인트 총합 계산 오류 수정
- 템플릿 타입 오류 해결 (strftime, break 태그)
```

### 7. 중요 참고사항
- **매번 푸시 후 실행**: 예외 없이 모든 푸시 후 문서 업데이트
- **사용자에게 알림**: 문서 업데이트 완료 시 사용자에게 확인 요청
- **일관된 형식**: 항상 동일한 마크다운 형식 사용
- **간결하고 명확**: 기술적 세부사항보다 사용자 관점의 변화 중심

### 8. 문서 업데이트 완료 확인
문서 업데이트 후 다음과 같이 사용자에게 보고:
```
✅ 문서 업데이트 완료!
📝 README.md에 [날짜] 업데이트 내역 추가
🔍 변경사항: [주요 변경사항 요약]
```

이 규칙을 통해 프로젝트의 문서가 항상 최신 상태를 유지하며, 팀원들이 변경사항을 쉽게 파악할 수 있습니다.